/* tslint:disable */
/* eslint-disable */
/**
 * QuantU Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PostApiQuestionResults,
  QuestionResult,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostApiQuestionResultsFromJSON,
    PostApiQuestionResultsToJSON,
    QuestionResultFromJSON,
    QuestionResultToJSON,
} from '../models';

export interface DeleteApiQuestionResultsRequest {
    questionId: number;
    id: number;
}

export interface DeleteApiQuestionResultsIdRequest {
    questionId: number;
    id: number;
}

export interface GetApiQuestionResultsRequest {
    questionId: number;
}

export interface GetApiQuestionResultsIdRequest {
    questionId: number;
    id: number;
}

export interface PostApiQuestionResultsRequest {
    postApiQuestionResults: PostApiQuestionResults;
}

/**
 * QuestionResultsApi - interface
 * 
 * @export
 * @interface QuestionResultsApiInterface
 */
export interface QuestionResultsApiInterface {
    /**
     * Delete all the question results for a given question
     * @param {number} questionId Question ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionResultsApiInterface
     */
    deleteApiQuestionResultsRaw(requestParameters: DeleteApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete all the question results for a given question
     */
    deleteApiQuestionResults(requestParameters: DeleteApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete a question result
     * @param {number} questionId Question ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionResultsApiInterface
     */
    deleteApiQuestionResultsIdRaw(requestParameters: DeleteApiQuestionResultsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a question result
     */
    deleteApiQuestionResultsId(requestParameters: DeleteApiQuestionResultsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * List all question results for a given question
     * @param {number} questionId Question ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionResultsApiInterface
     */
    getApiQuestionResultsRaw(requestParameters: GetApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuestionResult>>>;

    /**
     * List all question results for a given question
     */
    getApiQuestionResults(requestParameters: GetApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuestionResult>>;

    /**
     * Show a single question result
     * @param {number} questionId Question ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionResultsApiInterface
     */
    getApiQuestionResultsIdRaw(requestParameters: GetApiQuestionResultsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResult>>;

    /**
     * Show a single question result
     */
    getApiQuestionResultsId(requestParameters: GetApiQuestionResultsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResult>;

    /**
     * Create a new question result
     * @param {PostApiQuestionResults} postApiQuestionResults 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionResultsApiInterface
     */
    postApiQuestionResultsRaw(requestParameters: PostApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResult>>;

    /**
     * Create a new question result
     */
    postApiQuestionResults(requestParameters: PostApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResult>;

}

/**
 * 
 */
export class QuestionResultsApi extends runtime.BaseAPI implements QuestionResultsApiInterface {

    /**
     * Delete all the question results for a given question
     */
    async deleteApiQuestionResultsRaw(requestParameters: DeleteApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling deleteApiQuestionResults.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApiQuestionResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.questionId !== undefined) {
            queryParameters['question_id'] = requestParameters.questionId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer_auth authentication
        }

        const response = await this.request({
            path: `/api/question_results`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all the question results for a given question
     */
    async deleteApiQuestionResults(requestParameters: DeleteApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiQuestionResultsRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a question result
     */
    async deleteApiQuestionResultsIdRaw(requestParameters: DeleteApiQuestionResultsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling deleteApiQuestionResultsId.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApiQuestionResultsId.');
        }

        const queryParameters: any = {};

        if (requestParameters.questionId !== undefined) {
            queryParameters['question_id'] = requestParameters.questionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer_auth authentication
        }

        const response = await this.request({
            path: `/api/question_results/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a question result
     */
    async deleteApiQuestionResultsId(requestParameters: DeleteApiQuestionResultsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiQuestionResultsIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all question results for a given question
     */
    async getApiQuestionResultsRaw(requestParameters: GetApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuestionResult>>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling getApiQuestionResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.questionId !== undefined) {
            queryParameters['question_id'] = requestParameters.questionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer_auth authentication
        }

        const response = await this.request({
            path: `/api/question_results`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionResultFromJSON));
    }

    /**
     * List all question results for a given question
     */
    async getApiQuestionResults(requestParameters: GetApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuestionResult>> {
        const response = await this.getApiQuestionResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show a single question result
     */
    async getApiQuestionResultsIdRaw(requestParameters: GetApiQuestionResultsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResult>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling getApiQuestionResultsId.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApiQuestionResultsId.');
        }

        const queryParameters: any = {};

        if (requestParameters.questionId !== undefined) {
            queryParameters['question_id'] = requestParameters.questionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer_auth authentication
        }

        const response = await this.request({
            path: `/api/question_results/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResultFromJSON(jsonValue));
    }

    /**
     * Show a single question result
     */
    async getApiQuestionResultsId(requestParameters: GetApiQuestionResultsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResult> {
        const response = await this.getApiQuestionResultsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new question result
     */
    async postApiQuestionResultsRaw(requestParameters: PostApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResult>> {
        if (requestParameters.postApiQuestionResults === null || requestParameters.postApiQuestionResults === undefined) {
            throw new runtime.RequiredError('postApiQuestionResults','Required parameter requestParameters.postApiQuestionResults was null or undefined when calling postApiQuestionResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer_auth authentication
        }

        const response = await this.request({
            path: `/api/question_results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiQuestionResultsToJSON(requestParameters.postApiQuestionResults),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResultFromJSON(jsonValue));
    }

    /**
     * Create a new question result
     */
    async postApiQuestionResults(requestParameters: PostApiQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResult> {
        const response = await this.postApiQuestionResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
