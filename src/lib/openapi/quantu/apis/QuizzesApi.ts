/* tslint:disable */
/* eslint-disable */
/**
 * QuantU Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { ErrorResponse, PatchApiQuizzesId, PostApiQuizzes, Quiz } from '../models';
import {
	ErrorResponseFromJSON,
	ErrorResponseToJSON,
	PatchApiQuizzesIdFromJSON,
	PatchApiQuizzesIdToJSON,
	PostApiQuizzesFromJSON,
	PostApiQuizzesToJSON,
	QuizFromJSON,
	QuizToJSON
} from '../models';

export interface DeleteApiQuizzesIdRequest {
	id: number;
}

export interface GetApiQuizzesIdRequest {
	id: number;
}

export interface PatchApiQuizzesIdRequest {
	id: number;
	patchApiQuizzesId: PatchApiQuizzesId;
}

export interface PostApiQuizzesRequest {
	postApiQuizzes: PostApiQuizzes;
}

/**
 * QuizzesApi - interface
 *
 * @export
 * @interface QuizzesApiInterface
 */
export interface QuizzesApiInterface {
	/**
	 * Delete a quiz
	 * @param {number} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof QuizzesApiInterface
	 */
	deleteApiQuizzesIdRaw(
		requestParameters: DeleteApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>>;

	/**
	 * Delete a quiz
	 */
	deleteApiQuizzesId(
		requestParameters: DeleteApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void>;

	/**
	 * List all quizzes
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof QuizzesApiInterface
	 */
	getApiQuizzesRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Quiz>>>;

	/**
	 * List all quizzes
	 */
	getApiQuizzes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Quiz>>;

	/**
	 * Show a quiz
	 * @param {number} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof QuizzesApiInterface
	 */
	getApiQuizzesIdRaw(
		requestParameters: GetApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Quiz>>;

	/**
	 * Show a quiz
	 */
	getApiQuizzesId(
		requestParameters: GetApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Quiz>;

	/**
	 * Update a quiz
	 * @param {number} id
	 * @param {PatchApiQuizzesId} patchApiQuizzesId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof QuizzesApiInterface
	 */
	patchApiQuizzesIdRaw(
		requestParameters: PatchApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Quiz>>;

	/**
	 * Update a quiz
	 */
	patchApiQuizzesId(
		requestParameters: PatchApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Quiz>;

	/**
	 * Create a new quiz
	 * @param {PostApiQuizzes} postApiQuizzes
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof QuizzesApiInterface
	 */
	postApiQuizzesRaw(
		requestParameters: PostApiQuizzesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Quiz>>;

	/**
	 * Create a new quiz
	 */
	postApiQuizzes(
		requestParameters: PostApiQuizzesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Quiz>;
}

/**
 *
 */
export class QuizzesApi extends runtime.BaseAPI implements QuizzesApiInterface {
	/**
	 * Delete a quiz
	 */
	async deleteApiQuizzesIdRaw(
		requestParameters: DeleteApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling deleteApiQuizzesId.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // bearer_auth authentication
		}

		const response = await this.request(
			{
				path: `/api/quizzes/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Delete a quiz
	 */
	async deleteApiQuizzesId(
		requestParameters: DeleteApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteApiQuizzesIdRaw(requestParameters, initOverrides);
	}

	/**
	 * List all quizzes
	 */
	async getApiQuizzesRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Quiz>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // bearer_auth authentication
		}

		const response = await this.request(
			{
				path: `/api/quizzes`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuizFromJSON));
	}

	/**
	 * List all quizzes
	 */
	async getApiQuizzes(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Quiz>> {
		const response = await this.getApiQuizzesRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Show a quiz
	 */
	async getApiQuizzesIdRaw(
		requestParameters: GetApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Quiz>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling getApiQuizzesId.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // bearer_auth authentication
		}

		const response = await this.request(
			{
				path: `/api/quizzes/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => QuizFromJSON(jsonValue));
	}

	/**
	 * Show a quiz
	 */
	async getApiQuizzesId(
		requestParameters: GetApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Quiz> {
		const response = await this.getApiQuizzesIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Update a quiz
	 */
	async patchApiQuizzesIdRaw(
		requestParameters: PatchApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Quiz>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling patchApiQuizzesId.'
			);
		}

		if (
			requestParameters.patchApiQuizzesId === null ||
			requestParameters.patchApiQuizzesId === undefined
		) {
			throw new runtime.RequiredError(
				'patchApiQuizzesId',
				'Required parameter requestParameters.patchApiQuizzesId was null or undefined when calling patchApiQuizzesId.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // bearer_auth authentication
		}

		const response = await this.request(
			{
				path: `/api/quizzes/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id))
				),
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: PatchApiQuizzesIdToJSON(requestParameters.patchApiQuizzesId)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => QuizFromJSON(jsonValue));
	}

	/**
	 * Update a quiz
	 */
	async patchApiQuizzesId(
		requestParameters: PatchApiQuizzesIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Quiz> {
		const response = await this.patchApiQuizzesIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Create a new quiz
	 */
	async postApiQuizzesRaw(
		requestParameters: PostApiQuizzesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Quiz>> {
		if (
			requestParameters.postApiQuizzes === null ||
			requestParameters.postApiQuizzes === undefined
		) {
			throw new runtime.RequiredError(
				'postApiQuizzes',
				'Required parameter requestParameters.postApiQuizzes was null or undefined when calling postApiQuizzes.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // bearer_auth authentication
		}

		const response = await this.request(
			{
				path: `/api/quizzes`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: PostApiQuizzesToJSON(requestParameters.postApiQuizzes)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => QuizFromJSON(jsonValue));
	}

	/**
	 * Create a new quiz
	 */
	async postApiQuizzes(
		requestParameters: PostApiQuizzesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Quiz> {
		const response = await this.postApiQuizzesRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
