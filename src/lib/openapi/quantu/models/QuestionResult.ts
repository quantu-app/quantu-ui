/* tslint:disable */
/* eslint-disable */
/**
 * QuantU Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * QuestionResult model
 * @export
 * @interface QuestionResult
 */
export interface QuestionResult {
    /**
     * ID
     * @type {number}
     * @memberof QuestionResult
     */
    id: number;
    /**
     * Data
     * @type {object}
     * @memberof QuestionResult
     */
    data: object;
    /**
     * User Id
     * @type {number}
     * @memberof QuestionResult
     */
    user_id: number;
    /**
     * Question Id
     * @type {number}
     * @memberof QuestionResult
     */
    question_id: number;
    /**
     * 
     * @type {Date}
     * @memberof QuestionResult
     */
    created_at: Date;
    /**
     * 
     * @type {Date}
     * @memberof QuestionResult
     */
    updated_at: Date;
}

/**
 * Check if a given object implements the QuestionResult interface.
 */
export function instanceOfQuestionResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "user_id" in value;
    isInstance = isInstance && "question_id" in value;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "updated_at" in value;

    return isInstance;
}

export function QuestionResultFromJSON(json: any): QuestionResult {
    return QuestionResultFromJSONTyped(json, false);
}

export function QuestionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'data': json['data'],
        'user_id': json['user_id'],
        'question_id': json['question_id'],
        'created_at': (new Date(json['created_at'])),
        'updated_at': (new Date(json['updated_at'])),
    };
}

export function QuestionResultToJSON(value?: QuestionResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'data': value.data,
        'user_id': value.user_id,
        'question_id': value.question_id,
        'created_at': (value.created_at.toISOString()),
        'updated_at': (value.updated_at.toISOString()),
    };
}

