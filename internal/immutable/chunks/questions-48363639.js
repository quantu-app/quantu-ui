import{d as w,w as O}from"./index-779a6bb2.js";import{o as j,w as h,a as z,b as Q,g as I}from"./user-ff4521b2.js";import{g as q,d as A,e as D,i as B}from"./quizzes-adab02fc.js";async function U(i){return await(await q()).getAllFromIndex("questions","user_id",i)}async function x(i){return await(await q()).get("questions",i)}async function g(i,o,e,n){const d=await q(),u={...y(i,o,e),...n,uri:n.name?A(n.name):void 0},c=await d.put("questions",u);return{...u,local_id:c}}async function v(i,o,e,n,d){const u=await q(),c=await u.get("questions",n)||y(i,o,e),s={...c,...d,user_id:i,local_quiz_id:o,quiz_id:e,local_id:n,uri:d.name?A(d.name):c.uri,updated_at:new Date};return await u.put("questions",s,n),s}async function F(i,o,e,n,d){const u=await q(),s={...await u.get("questions",n)||y(i,o,e),...d,user_id:i,local_quiz_id:o,quiz_id:e,local_id:n};return await u.put("questions",s),s}async function m(i){await(await q()).delete("questions",i)}function y(i,o,e){return{id:0,local_quiz_id:o,local_deleted:0,quiz_id:e,user_id:i,name:"",uri:"",created_at:new Date,updated_at:new Date}}const _=O({});w(_,i=>Object.values(i));const k=w(_,i=>i),E=w(_,i=>Object.values(i).reduce((o,e)=>((o[e.local_quiz_id]||(o[e.local_quiz_id]=[])).push(e),o),{}));async function C(i,o){var n;const e=await B(i);if(e){const d=(n=I())==null?void 0:n.id;let u={};z()&&(u=await Q.postApiQuestions({quizId:e.id,postApiQuestions:o}));const c=await g(d,e.local_id,e.id,{...o,...u});return _.update(s=>({...s,[c.local_id]:c})),c}}async function R(i,o,e){var d;const n=await B(i);if(n){const u=await x(o);if(u){const c=(d=I())==null?void 0:d.id;let s={};z()&&(s=await Q.patchApiQuestionsId({quizId:n.id,id:u.id,patchApiQuestionsId:e}));const l=await v(c,n.local_id,n.id,o,{...u,...s});return _.update(f=>({...f,[l.local_id]:l})),l}}}async function L(i){const o=await D(),e=Object.values(o).reduce((s,l)=>(s[l.id]=l,s),{}),n=await U(i),d={},u={},c=[];for(const s of n)s.id===0?c.push(s):u[s.id]=s,s.local_deleted===0&&(d[s.local_id]=s);if(_.update(s=>({...s,...d})),z()){const s=(await Promise.all(Object.keys(e).map(t=>Q.getApiQuestions({quizId:parseInt(t)})))).flat(1),l={},f=new Set,p=[];for(const t of s){const a=u[t.id];if(a)a.updated_at>t.updated_at?a.local_deleted===1?p.push(Q.deleteApiQuestionsId({quizId:t.quiz_id,id:t.id}).then(()=>m(a.local_id)).then(()=>{f.add(a.local_id)})):p.push(Q.patchApiQuestionsId({quizId:t.quiz_id,id:t.id,patchApiQuestionsId:{...t,...a}}).then(r=>{l[a.id]={...a,...r}})):a.updated_at<t.updated_at?p.push(v(i,a.local_quiz_id,t.quiz_id,a.local_id,{...a,...t}).then(r=>{l[r.local_id]=r})):l[a.local_id]={...a,...t};else{const r=e[t.quiz_id];p.push(g(i,r.local_id,r.id,t).then(b=>{l[b.local_id]=b}))}}for(const t of c)p.push(Q.postApiQuestions({quizId:t.quiz_id,postApiQuestions:t}).then(a=>F(i,t.local_quiz_id,t.quiz_id,t.local_id,a)).then(a=>{l[a.local_id]=a}));await Promise.all(p),await Promise.all(Object.values(u).map(async t=>{l[t.local_id]||(f.add(t.local_id),await m(t.local_id))})),_.update(t=>{t={...t,...l};for(const a of f)delete t[a];return t})}}j.on("online",async()=>{const i=await h();L(i.id)});h().then(i=>L(i.id));export{k as a,C as c,E as q,R as u};
